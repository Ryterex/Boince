<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moving</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
grav = 0.5;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed = 5;
global.inversion1 = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);

if (keyboard_check(vk_space)) {
    movespeed = 10;
}
else {
    movespeed = 5;
}

//React to inputs
if (global.inversion1 == 0)
{
    move = key_left + key_right;
    key_jump = keyboard_check_pressed(vk_up);
}
else
{
    move = -(key_left + key_right);
    key_jump = keyboard_check_pressed(vk_down);
    instance_create(obj_p1.x, obj_p1.y - 32, obj_dizzy2);
}

hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_ground))
{
    vsp = key_jump * -jumpspeed;

}

/*
if (place_meeting(x,y+1,obj_mvplatformright))
{
    vsp = key_jump * -jumpspeed;

}

if (place_meeting(x,y+1,obj_mvplatformup))
{
    vsp = key_jump * -jumpspeed;

}
*/

if (keyboard_check_pressed(vk_right))
{

    image_xscale = 1;
}


if (keyboard_check_pressed(vk_left))
{
    image_xscale = -1;
}

//Horizontal Collsion
if (place_meeting(x+hsp,y, obj_ground))
{
    while (!place_meeting(x+sign(hsp),y, obj_ground))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x+hsp,y, obj_p2))
{
    while (!place_meeting(x+sign(hsp),y, obj_p2))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x+hsp,y, obj_goalp1))
{
    while (!place_meeting(x+sign(hsp),y, obj_goalp1))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x+hsp,y, obj_goalp2))
{
    while (!place_meeting(x+sign(hsp),y, obj_goalp2))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

/*
if (place_meeting(x+hsp,y, obj_mvplatformright))
{
    while (!place_meeting(x+sign(hsp),y, obj_mvplatformright))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x+hsp,y, obj_mvplatformup))
{
    while (!place_meeting(x+sign(hsp),y, obj_mvplatformup))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
*/

//Vertical Collsion
if (place_meeting(x,y+vsp, obj_ground))
{
    while (!place_meeting(x,y+sign(vsp), obj_ground))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

if (place_meeting(x,y+vsp, obj_p2))
{
    while (!place_meeting(x,y+sign(vsp), obj_p2))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

/*
if (place_meeting(x,y+vsp, obj_mvplatformright))
{
    while (!place_meeting(x,y+sign(vsp), obj_mvplatformright))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

if (place_meeting(x,y+vsp, obj_mvplatformup))
{
    while (!place_meeting(x,y+sign(vsp), obj_mvplatformup))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
*/

//inversion of controls
/*
if (keyboard_check_pressed(vk_rshift))
{
    if (global.energy1 == 100)
    {
        if (global.inversion2 == 0)
        {
        global.inversion2 = 1;
        global.energy1 = 0;
        }
        
        else
        {
        global.inversion2 = 0;
        global.energy1 = 0;
        }
    }
}
*/  

if (keyboard_check_pressed(vk_rshift)) {
    if (global.possession == 1) {
        var inst;
        if (image_xscale == 1) {
            inst = instance_create(x+50, obj_p1.y, obj_ball);
            obj_ball.speed = 8;
        }
        else if (image_xscale == -1) {
            inst = instance_create(x-50, obj_p1.y, obj_ball);
            obj_ball.speed = -8;
        }
        sprite_index = spr_moving;
    }
}

x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.possession</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_ball</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_moving1ball</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current == 0)
{
    draw_self()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
